import './browser.css.proxy.js';
/* src/browser.svelte generated by Svelte v3.24.0 */
import {
	SvelteComponent,
	append,
	attr,
	destroy_each,
	detach,
	element,
	init,
	insert,
	noop,
	safe_not_equal,
	space,
	text
} from "/web-piano/web_modules/svelte/internal.js";

import { browsers } from "/web-piano/bundle/components/browser.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[0] = list[i];
	child_ctx[2] = i;
	return child_ctx;
}

// (7:2) {#each browsers as browser, index}
function create_each_block(ctx) {
	let li;
	let t0;
	let a;
	let t1_value = /*browser*/ ctx[0].name + "";
	let t1;
	let a_href_value;
	let t2;

	return {
		c() {
			li = element("li");
			t0 = text("Download: ");
			a = element("a");
			t1 = text(t1_value);
			t2 = space();
			attr(a, "href", a_href_value = /*browser*/ ctx[0].link);
			attr(li, "class", "browsers-links__item svelte-1hvvzet");
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, t0);
			append(li, a);
			append(a, t1);
			append(li, t2);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(li);
		}
	};
}

function create_fragment(ctx) {
	let center;
	let h2;
	let t1;
	let ul;
	let each_value = browsers;
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			center = element("center");
			h2 = element("h2");
			h2.textContent = "Unfortunately our app works only in the following browsers.";
			t1 = space();
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(h2, "class", "svelte-1hvvzet");
			attr(ul, "class", "browsers-links svelte-1hvvzet");
		},
		m(target, anchor) {
			insert(target, center, anchor);
			append(center, h2);
			append(center, t1);
			append(center, ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*browsers*/ 0) {
				each_value = browsers;
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(center);
			destroy_each(each_blocks, detaching);
		}
	};
}

class Browser extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, null, create_fragment, safe_not_equal, {});
	}
}

export default Browser;