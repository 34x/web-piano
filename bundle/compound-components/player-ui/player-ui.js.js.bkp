import './player-ui.css.proxy.js';
/* src/compound-components/player-ui/player-ui.svelte generated by Svelte v3.24.0 */
import {
	SvelteComponent,
	append,
	attr,
	create_component,
	destroy_component,
	detach,
	element,
	init,
	insert,
	mount_component,
	noop,
	safe_not_equal,
	set_data,
	space,
	text,
	transition_in,
	transition_out
} from "/web-piano/web_modules/svelte/internal.js";

import ControlsUI from "/web-piano/bundle/compound-components/player-ui/controls-ui.js";
import PlaylistUI from "/web-piano/bundle/compound-components/player-ui/playlist-ui.js";

function create_else_block(ctx) {
	let t;

	return {
		c() {
			t = text("Please selecte a piece from playlist");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (22:8) {#if currentSong}
function create_if_block(ctx) {
	let t0;
	let b;
	let t1_value = /*currentSong*/ ctx[0].title + "";
	let t1;
	let t2;
	let t3_value = /*currentSong*/ ctx[0].filename + "";
	let t3;
	let t4;

	return {
		c() {
			t0 = text("Now playing: ");
			b = element("b");
			t1 = text(t1_value);
			t2 = text(" (");
			t3 = text(t3_value);
			t4 = text(")");
		},
		m(target, anchor) {
			insert(target, t0, anchor);
			insert(target, b, anchor);
			append(b, t1);
			insert(target, t2, anchor);
			insert(target, t3, anchor);
			insert(target, t4, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*currentSong*/ 1 && t1_value !== (t1_value = /*currentSong*/ ctx[0].title + "")) set_data(t1, t1_value);
			if (dirty & /*currentSong*/ 1 && t3_value !== (t3_value = /*currentSong*/ ctx[0].filename + "")) set_data(t3, t3_value);
		},
		d(detaching) {
			if (detaching) detach(t0);
			if (detaching) detach(b);
			if (detaching) detach(t2);
			if (detaching) detach(t3);
			if (detaching) detach(t4);
		}
	};
}

function create_fragment(ctx) {
	let div1;
	let div0;
	let t0;
	let controlsui;
	let t1;
	let playlistui;
	let current;

	function select_block_type(ctx, dirty) {
		if (/*currentSong*/ ctx[0]) return create_if_block;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx, -1);
	let if_block = current_block_type(ctx);

	controlsui = new ControlsUI({
			props: { fileInfo: /*currentSong*/ ctx[0] }
		});

	playlistui = new PlaylistUI({
			props: { selected: /*currentSong*/ ctx[0] }
		});

	playlistui.$on("songSelected", /*songSelected*/ ctx[1]);

	return {
		c() {
			div1 = element("div");
			div0 = element("div");
			if_block.c();
			t0 = space();
			create_component(controlsui.$$.fragment);
			t1 = space();
			create_component(playlistui.$$.fragment);
			attr(div0, "class", "piece-info svelte-dp4d2d");
			attr(div1, "class", "player-container svelte-dp4d2d");
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, div0);
			if_block.m(div0, null);
			append(div1, t0);
			mount_component(controlsui, div1, null);
			append(div1, t1);
			mount_component(playlistui, div1, null);
			current = true;
		},
		p(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(div0, null);
				}
			}

			const controlsui_changes = {};
			if (dirty & /*currentSong*/ 1) controlsui_changes.fileInfo = /*currentSong*/ ctx[0];
			controlsui.$set(controlsui_changes);
			const playlistui_changes = {};
			if (dirty & /*currentSong*/ 1) playlistui_changes.selected = /*currentSong*/ ctx[0];
			playlistui.$set(playlistui_changes);
		},
		i(local) {
			if (current) return;
			transition_in(controlsui.$$.fragment, local);
			transition_in(playlistui.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(controlsui.$$.fragment, local);
			transition_out(playlistui.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if_block.d();
			destroy_component(controlsui);
			destroy_component(playlistui);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let currentSong;

	function songSelected(event) {
		$$invalidate(0, currentSong = event.detail);
	}

	return [currentSong, songSelected];
}

class Player_ui extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Player_ui;