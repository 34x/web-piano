import './playlist-ui.css.proxy.js';
/* src/compound-components/player-ui/playlist-ui.svelte generated by Svelte v3.24.0 */
import {
	SvelteComponent,
	append,
	attr,
	destroy_each,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	safe_not_equal,
	space,
	text,
	toggle_class
} from "/web-piano/web_modules/svelte/internal.js";

import { getContents } from "/web-piano/bundle/components/midi-contents.js";
import { createEventDispatcher } from "/web-piano/web_modules/svelte.js";
import { setContext } from "/web-piano/web_modules/svelte.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[7] = list[i];
	child_ctx[9] = i;
	return child_ctx;
}

// (33:8) {#each contentsSorted as content, index}
function create_each_block(ctx) {
	let li;
	let span;
	let t0_value = /*content*/ ctx[7].title + "";
	let t0;
	let t1;
	let a;
	let img;
	let img_src_value;
	let a_href_value;
	let t2;
	let mounted;
	let dispose;

	return {
		c() {
			li = element("li");
			span = element("span");
			t0 = text(t0_value);
			t1 = space();
			a = element("a");
			img = element("img");
			t2 = space();
			attr(span, "class", "svelte-1fhnq7g");
			if (img.src !== (img_src_value = "./download.png")) attr(img, "src", img_src_value);
			attr(img, "alt", "download");
			attr(img, "class", "svelte-1fhnq7g");
			attr(a, "href", a_href_value = "./midi/" + /*content*/ ctx[7].filename);
			attr(a, "download", "");
			attr(li, "class", "svelte-1fhnq7g");
			toggle_class(li, "selected", /*selectedIndex*/ ctx[0] === /*index*/ ctx[9]);
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, span);
			append(span, t0);
			append(li, t1);
			append(li, a);
			append(a, img);
			append(li, t2);

			if (!mounted) {
				dispose = listen(span, "click", /*createSongChangeHandler*/ ctx[2](/*content*/ ctx[7]));
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty & /*selectedIndex*/ 1) {
				toggle_class(li, "selected", /*selectedIndex*/ ctx[0] === /*index*/ ctx[9]);
			}
		},
		d(detaching) {
			if (detaching) detach(li);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let center;
	let h2;
	let t1;
	let ul;
	let each_value = /*contentsSorted*/ ctx[1];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			center = element("center");
			h2 = element("h2");
			h2.textContent = "Playlist";
			t1 = space();
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(ul, "class", "svelte-1fhnq7g");
		},
		m(target, anchor) {
			insert(target, center, anchor);
			append(center, h2);
			append(center, t1);
			append(center, ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*selectedIndex, contentsSorted, createSongChangeHandler*/ 7) {
				each_value = /*contentsSorted*/ ctx[1];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(center);
			destroy_each(each_blocks, detaching);
		}
	};
}

function getSelectedIndex(aList, selectedItem) {
	if (!selectedItem) {
		return -1;
	}

	return aList.findIndex(el => el.filename === selectedItem.filename);
}

function instance($$self, $$props, $$invalidate) {
	let { selected = undefined } = $$props;
	const contents = getContents();
	const dispatch = createEventDispatcher();
	let selectedIndex = -1;
	const contentsSorted = contents.sort((a, b) => a.title.localeCompare(b.title));

	function songChanged(content) {
		dispatch("songSelected", content);
	}

	function createSongChangeHandler(content) {
		const a = function () {
			songChanged(content);
		};

		return a;
	}

	$$self.$set = $$props => {
		if ("selected" in $$props) $$invalidate(3, selected = $$props.selected);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*selected*/ 8) {
			$: {
				$$invalidate(0, selectedIndex = getSelectedIndex(contentsSorted, selected));
			}
		}
	};

	return [selectedIndex, contentsSorted, createSongChangeHandler, selected];
}

class Playlist_ui extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { selected: 3 });
	}
}

export default Playlist_ui;