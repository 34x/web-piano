/* src/compound-components/player-ui/playlist-ui.svelte generated by Svelte v3.24.0 */
import {
	SvelteComponent,
	detach,
	element,
	init,
	insert,
	noop,
	safe_not_equal
} from "/web-piano/web_modules/svelte/internal.js";

import { getContents } from "/web-piano/bundle/components/midi-contents.js";
import { createEventDispatcher } from "/web-piano/web_modules/svelte.js";
import { setContext } from "/web-piano/web_modules/svelte.js";

function create_fragment(ctx) {
	let center;

	return {
		c() {
			center = element("center");
			center.innerHTML = `<h2>Playlist</h2>`;
		},
		m(target, anchor) {
			insert(target, center, anchor);
		},
		p: noop,
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(center);
		}
	};
}

function getSelectedIndex(aList, selectedItem) {
	if (!selectedItem) {
		return -1;
	}

	return aList.findIndex(el => el.filename === selectedItem.filename);
}

function instance($$self, $$props, $$invalidate) {
	let { selected } = $$props;
	const contents = getContents();
	const dispatch = createEventDispatcher();
	let selectedIndex = -1;
	const contentsSorted = contents.sort((a, b) => a.title.localeCompare(b.title));

	function songChanged(content) {
		dispatch("songSelected", content);
	}

	function createSongChangeHandler(content) {
		const a = function () {
			songChanged(content);
		};

		return a;
	}

	$$self.$set = $$props => {
		if ("selected" in $$props) $$invalidate(0, selected = $$props.selected);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*selected*/ 1) {
			$: {
				selectedIndex = getSelectedIndex(contentsSorted, selected);
			}
		}
	};

	return [selected];
}

class Playlist_ui extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { selected: 0 });
	}
}

export default Playlist_ui;